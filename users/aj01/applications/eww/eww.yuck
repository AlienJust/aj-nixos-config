(defpoll volume :interval "500ms" `bash ~/.config/eww/do.sh system vol`)
(defpoll date :interval "500ms" `date +'{"hour":"%H","min":"%M"}'`)
(defpoll music_name :interval "500ms" `bash ~/.config/eww/do.sh music name`)
(defpoll kb_layout :interval "500ms" `bash ~/.config/eww/do.sh keyboard layout`)

(defvar volume_reveal false)
(defvar music_reveal false)

(defvar music_prev `~/.config/eww/scripts/do.sh music prev`)
(defvar music_toggle `~/.config/eww/scripts/do.sh music toggle`)
(defvar music_next `~/.config/eww/scripts/do.sh music next`)



(deflisten workspaces :initial "[]" "bash ~/.config/eww/get-workspaces")
(deflisten current_workspace :initial "" "bash ~/.config/eww/get-active-workspace")
(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")
(defpoll time :interval "10s"
  "date '+%H:%M'")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :exclusive true
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "1920"
                      :height "32px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "15px")
  (bar :screen 0))

(defwidget bar []
  (box :class "bar_class"
       :orientation "h"
       :valign "center"
  (left)
  (center)
  (right)
    ))

(defwidget left []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "start"
		 :class "left_modules"
(workspaces)))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "center"
       :spacing 10
  (label :text "${workspaces}${current_workspace}" :visible false)
  (for workspace in workspaces
      (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
        ;(label :text "${workspace.id}${workspace.windows > 0 ? "${workspace.id == current_workspace ? "" : ""}" : "${workspace.id == current_workspace ? "" : ""}"}")
        (label :text "${workspace.id}${workspace.windows > 0 ? "${workspace.id == current_workspace ? "" : ""}" : "${workspace.id == current_workspace ? "" : ""}"}")
        )
    )
  )
)



(defwidget media []
  (box :class "media"
       :orientation "h"
       :space-evenly false
       :halign "start"
    {music != "" ? " ${music}" : ""}))

(defwidget center []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
(media)))



(defwidget right []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "end"
		 :class "right_modules"
(sidestuff)))




(defwidget sidestuff []
	(box :class "sidestuff"
        :spacing 10
	:orientation "h"
	:space-evenly false
	:halign "end"
                (box :orientation "h"
                :space-evenly false
                :halign "center"
                :valign "center"
                     (label :class "icon" :text "")
                     (button :onclick "hyprctl switchxkblayout --usb-keyboard next"
                :onrightclick "hyprctl switchxkblayout --usb-keyboard prev"
                        (label :text "${kb_layout}" )))
  (revealer :transition "slideleft"
		:reveal volume_reveal
		:duration "550ms"
		:halign "center"
			(box :orientation "h"
			:space-evenly false
			:halign "center"
			:valign "center"
                        :class "volume"
				(scale  :value volume
		     		:orientation "h"
				:flipped true
		     		:tooltip "Volume: ${volume}%"
		     		:max 101
		     		:min 0
		     		:onchange "pamixer --set-volume {}")))
	        (button :onclick "eww update volume_reveal=true"
		:onrightclick "eww update volume_reveal=false"
                        (label :class "icon" :text ""))

                (box :orientation "h"
                :class "date"
                :space-evenly false
                :halign "end"
                :valign "center"
                        (time))))

(defwidget time []
  (box :class "time"
       :orientation "h"
       :space-evenly false
       :halign "end"
    {"${time}"}))